I"Â3<h1 id="what-is-nginx">What is nginx?</h1>

<p>A lightweight, high-performance web server designed for high-traffic use cases.</p>

<p>**Serving Static Files: **One of NGINX‚Äôs strongest features is the ability to efficiently serve static content such as HTML and media files (musch faster than aiohttp or express static file support). NGINX uses an asynchronous event-driven model which provides predictable performance under load.</p>

<p><strong>Reverse Proxy</strong>: a reverse proxy is a service that takes a client request, sends the request to one or more proxied servers, fetches the response, and delivers the server‚Äôs response to the client. Using Nginx as a reverse proxy gives you several additional benefits:</p>
<ul>
  <li>Load Balancing¬†- Nginx can perform load balancing to distribute clients‚Äô requests across proxied servers, which improve the performance, scalability, and reliability. Running several aiohttp instances behind nginx allows to utilize all CPU cores.‚Ä®</li>
  <li>Caching¬†- With Nginx as a reverse proxy, you can cache the pre-rendered versions of pages to speed up page load times. It works by caching the content received from the proxied servers‚Äô responses and using it to respond to clients without having to contact the proxied server for the same content every time.</li>
  <li>SSL Termination¬†- Nginx can act as an SSL endpoint for connections with the clients. It will handle and decrypt incoming SSL connections and encrypt the proxied server‚Äôs responses.</li>
  <li>Compression¬†- If the proxied server does not send compressed responses, you can configure Nginx to compress the responses before sending them to the clients.</li>
  <li>Mitigating DDoS Attacks¬†- You can limit the incoming requests and number of connections per single IP address to a value typical for regular users. Nginx also allows you to block or restrict access based on the client location, and the value of the request headers such as ‚ÄúUser-Agent‚Äù and ‚ÄúReferer‚Äù. It may prevent many attacks based on malformed http protocol etc</li>
</ul>

<hr />

<h1 id="nginx-internals">Nginx Internals</h1>
<p>Nginx has one master process and several worker processes. The main purpose of the master process is to read and evaluate configuration, and maintain worker processes. Worker processes do actual processing of requests. nginx employs event-based model and OS-dependent mechanisms to efficiently distribute requests among worker processes.</p>

<hr />

<h1 id="understand-nginx-configuration-language">Understand nginx configuration language</h1>

<p>The nginx configuration language is designed with these uses in mind:</p>

<p>We need some global parameters that any server process needs to start: which port to listen to, which user and group to run as, the process id, where to store logs etc. (<code class="highlighter-rouge">user</code>, , <code class="highlighter-rouge">error_log</code>)</p>

<p>We then need some global parameters specific to nginx internal architecturer: how many worker processes it should have and how many connections does each worker accept (<code class="highlighter-rouge">worker_processes</code>, <code class="highlighter-rouge">worker_connections</code>). The workers handle connections from clients, and as a rule for CPU-bound loads the number of workers should equal number of processors and for I/O bound loads multiplied by? by 1.5 or 2</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
       . . .
}

http {
       . . .
}

</code></pre></div></div>

<p>We then want some instructions to be applied to requests. Often it is the case we want the same set of instructions to apply to requests requesting to the same location in their urls, going to a particular server or following a particular protocol (HTTP).  So we allow these instructions (called <code class="highlighter-rouge">directives</code>) to be grouped together into <code class="highlighter-rouge">blocks</code> (or <code class="highlighter-rouge">context</code>).</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;block&gt; {

  &lt;directive&gt; &lt;parameters&gt;; 

}
</code></pre></div></div>

<p>For example, the <code class="highlighter-rouge">http</code> block contains directives for handling web directive. What might we want to put in instructions that apply to all web traffic? The location of special logs for this, the format of the log, whether we want the connections to be persistent for any time, etc‚Ä¶.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;
}

</code></pre></div></div>

<p>What might we want to put in a server block?  We want to be able to serve static files. We want to be able to host multiple websites on a single address
We want to be able to proxy the request. We might want to modify url, add headers,</p>

<p>How do we specify instructions? Similar to unix or ansible, nginx makes use of modules which take in arguments (parameters). A simple directive consists of the name and parameters separated by spaces and ends with a semicolon (;).</p>

<p>Example of modules:</p>

<p><strong>include files</strong>¬†can be used anywhere in your configuration file
include /opt/local/etc/nginx/mime.types; A wildcard may appear in the path to match multiple files: include /opt/local/etc/nginx/vhost/*.conf; The location of your¬†access.log¬†file should be defined in your¬†/etc/nginx/nginx.conf¬†file or your site configuration file within your¬†server¬†block. By default, this would be in¬†/etc/nginx/sites-available.</p>

<p><strong>error_log</strong>- locations of error_logs. Can be overwritten within directives. A second param indicates the level of log debug (only available when debugging mod configured at compilation), info, notice, warn, error, crit, alert and emerg.pid - the file where the process ID of the main process is written, overwriting the compiled-in default. 
<code class="highlighter-rouge">error_page code ... [=[response]] uri;</code></p>

<p>‚Ä®</p>

<p><strong>try_files</strong>
So add a catch-all fallback route to your¬†nginx location directive: If the URL doesn‚Äôt match any static assets, it should serve the same¬†index.html:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>location / {
  try_files $uri $uri/ /index.htm
}
</code></pre></div></div>

<p>nginx also allows us to set variables, and provides some default environmental variables. Variables can be accessed by a $. Some of the variables are $host, $remote_addr,  $upstream_http_x_forwarded_<something> (X-Forwarded-Something headers)</something></p>

<hr />

<h1 id="how-nginx-processes-a-request">How nginx processes a request?</h1>

<ol>
  <li>Filter Servers based on listen directive (port and IP address)</li>
  <li>Filter server_names based on host header (longest specific prefix, then first matching regular expression if not exact match in previous step)</li>
  <li>After selecting server, select location based on $uri part of the request.</li>
  <li>Once location match is found, modify the request path with root or alias directives, and apply any rewrite rules</li>
</ol>

<p><a href="http://nginx.org/en/docs/http/request_processing.html">Tutorial 1</a>
<a href="https://www.digitalocean.com/community/tutorials/understanding-nginx-server-and-location-block-selection-algorithms">The order in which server and location blocks are selected</a></p>

<p><strong>Alias vs Rewrite</strong> The¬†alias¬†is a directive which is similar to the URL re-write directive, which is used to rewrite the location. The only difference between them is that the URL displayed in the browser remains the same with¬†alias¬†but it changes with the¬†rewrite¬†directive. The¬†rewrite¬†directive works on the browser end, ie- the browser requests twice, once for the actual URL and another time with the modified(re-written) URL. While the¬†alias¬†directive works on the Nginx server end only, it internally modifies the URL, without the browser‚Äôs knowledge.</p>

<blockquote>
  <p>Depending of node app architecture it may be needed to replace proxy_pass http://localhost:3000; with proxy_pass http://localhost:3000/ to rewrite request URIs from /api/route/path/ to /route/path/</p>
</blockquote>

<p>Serving on SubPath, Rewriting URLs</p>

<ul>
  <li>https://www.keycdn.com/support/nginx-location-directive</li>
  <li>https://stackoverflow.com/questions/10631933/nginx-static-file-serving-confusion-with-root-alias</li>
  <li>https://www.nginx.com/blog/creating-nginx-rewrite-rules/</li>
  <li>https://serverfault.com/questions/379675/nginx-reverse-proxy-url-rewrite</li>
  <li>https://serverfault.com/questions/678742/nginx-proxy-pass-rewrite-of-response-header-location</li>
  <li>https://daten-und-bass.io/blog/serving-a-vue-cli-production-build-on-a-sub-path-with-nginx/</li>
  <li>https://serverfault.com/questions/576365/use-nginx-reverse-proxy-for-redirection</li>
  <li>https://serverfault.com/questions/761585/nginx-aliases-and-proxy-pass</li>
  <li>https://stackoverflow.com/questions/12847771/configure-nginx-with-proxy-pass</li>
</ul>

<hr />

<h1 id="examples">Examples</h1>

<p><strong>Remove particular cookies</strong>
This snippet should remove¬†some_cookie¬†cookie from the request before passing‚Ä®it to the backend:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>set $new_cookie $http_cookie;

if ($http_cookie ~ "(.*)(?:^|;)\s*some_cookie=[^;]+(.*)") {
    set $new_cookie $1$2;
}
proxy_set_header Cookie $new_cookie
</code></pre></div></div>

<p><strong>Location match based on regular expression</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>location ~* \.(?:ico|css|js|gif|jpe?g|png)$ {
    # Some basic cache-control for static files to be sent to the browser
    expires max;
    add_header Pragma public;
    add_header Cache-Control "public, must-revalidate, proxy-revalidate";
  }

</code></pre></div></div>

<p><strong>Nginx as Docker Container</strong></p>

<ul>
  <li>Mount configuration from the docker host as a volume</li>
  <li>Bake the configuration into the image</li>
  <li>Copy the files from the host</li>
</ul>

<p>NGINX can be controlled by signals and Docker provides¬†kill¬†command for sending signals to a container. For example, to reload the NGINX configuration run the command:</p>

<p><code class="highlighter-rouge">docker kill -s HUP &lt;container name&gt;</code>`</p>

<p>If you want to restart the NGINX process, restart the container by running the command:</p>

<p><code class="highlighter-rouge">docker restart &lt;container name&gt;</code>`</p>

<p>I thought docker-compose would keep the same IP between runs of the same container but it changes with each restart causing the nginx.conf to become stale. I can fix it by sending a SIGHUP to nginx which will make it reload the conf file and read the updated IP from the hosts file.
I suppose there isn‚Äôt a way to tell docker or compose to keep the same IP when restarting a container? Also described here: https://medium.com/@joatmon08/using-containers-to-learn-nginx-reverse-proxy-6be8ac75a757</p>

<hr />

<h1 id="frequently-used-commands">Frequently Used Commands</h1>

<p>nginx -t test your settings 
nginx -t -c
nginx -s reload
service nginx restart</p>

<hr />

<p><strong>Useful Reads</strong></p>

<ul>
  <li><a href="https://www.linode.com/docs/web-servers/nginx/how-to-configure-nginx/">How to</a></li>
  <li><a href="https://gist.github.com/soheilhy/8b94347ff8336d971ad0">Reverse Proxy 1</a></li>
  <li><a href="https://medium.com/@anandshende1994/webpack-proxy-3ab759c022db">Reverse Proxy 2</a></li>
  <li><a href="https://unix.stackexchange.com/questions/290141/nginx-reverse-proxy-redirection">Reverse Proxy Should Reset Host Header and Add X-Forwarded-For</a>. More info on Host header <a href="https://docs.oracle.com/cd/E49933_01/studio.320/studio_install/src/cidi_studio_reverse_proxy_preserve_host_headers.html">here</a>
    <ul>
      <li>NGINX even provides a¬†$proxy_add_x_forwarded_for¬†variable to automatically append¬†$remote_addr¬†to any incoming¬†X-Forwarded-For¬†headers. The¬†$proxy_add_x_forwarded_for¬†is equal to¬†$http_x_forwarded_for,$remote_addr, and the¬†$remote_addr¬†variable will be changed when¬†http_realip_module¬†is used. So you will not get the last proxy addr in that header. Changing the order of directives won‚Äôt have an effect because¬†nginx¬†configuration is declarative.</li>
    </ul>
  </li>
  <li><a href="https://redbyte.eu/en/blog/using-the-nginx-auth-request-module/">Authorization</a></li>
</ul>

:ET