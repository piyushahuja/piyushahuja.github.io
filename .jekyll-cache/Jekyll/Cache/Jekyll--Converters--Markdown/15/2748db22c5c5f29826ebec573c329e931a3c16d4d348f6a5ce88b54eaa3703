I"B.<p>For understanding loops and closures
https://stackoverflow.com/questions/16937223/pass-a-parameter-to-filereader-onload-event</p>

<p>Export ….</p>

<p>module.exports =  {
…..
}</p>

<p>￼</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function functionName(argument, callback){
    return asyncPromise.then (response =&gt; ….. callback(cbargument)).catch   
}


functionname(argument, () =&gt; …)
</code></pre></div></div>

<p>This is not good!
Leads to nested callbacks.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>functionName(argument) {
    return asyncPromise.then(response =&gt; &lt;do directly what callback would have done&gt;).catch(error =&gt; return promise).


}
</code></pre></div></div>

<p>For (var [key, value] of Object.entries(dictionaryObject)) vs for (var x in/of dictionary object)</p>

<p>JavaScript: Event Loop and stuff</p>

<p>https://stackoverflow.com/questions/21607692/understanding-the-event-loop
https://www.youtube.com/watch?time_continue=71&amp;v=8aGhZQkoFbQ
What happens when javascript makes an ajax request in a browser?
https://blog.bloomca.me/2018/12/22/writing-a-web-server-node.html</p>

<hr />

<p><strong>On Closures</strong></p>

<p>https://softwareengineering.stackexchange.com/questions/285941/why-would-a-program-use-a-closure
https://stackoverflow.com/questions/111102/how-do-javascript-closures-work?rq=1</p>

<p>Closures are a neat way of dealing with the following two realities of JavaScript: <strong>a. scope is at the function level, not the block level and, b. much of what you do in practice in JavaScript is asynchronous/event driven.</strong> A closure is one way of supporting first-class functions; it is an expression that can reference variables within its scope (when it was first declared), be assigned to a variable, be passed as an argument to a function, or be returned as a function result.</p>

<p>When a function (foo) declares other functions (bar and baz), the family of local variables created in foo is not destroyed when the function exits. The variables merely become invisible to the outside world. Foo can therefore cunningly return the functions bar and baz, and they can continue to read, write and communicate with each other through this closed-off family of variables (“the closure”) that nobody else can meddle with, not even someone who calls foo again in future.</p>

<p>https://medium.com/coderbyte/a-tricky-javascript-interview-question-asked-by-google-and-amazon-48d212890703</p>

<p>Private Variables:</p>

<p>https://lazamar.github.io/closures-private-variables-and-methods-in-javascript/
https://www.joezimjs.com/javascript/javascript-closures-and-the-module-pattern/
https://stackoverflow.com/questions/9772307/declaring-javascript-object-method-in-constructor-function-vs-in-prototype/9772864#9772864
http://www.crockford.com/javascript/private.html
https://stackoverflow.com/questions/12180790/defining-methods-via-prototype-vs-using-this-in-the-constructor-really-a-perfo
https://stackoverflow.com/questions/310870/use-of-prototype-vs-this-in-javascript</p>

<p><strong>This pattern of public, private, and privileged members is possible because JavaScript has closures.</strong> What this means is that an inner function always has access to the vars and parameters of its outer function, even after the outer function has returned. This is an extremely powerful property of the language. There is no book currently available on JavaScript programming that shows how to exploit it. Most don’t even mention it. Private and privileged members can only be made when an object is constructed. Public members can be added at any time.</p>

<hr />

<p>On Prototypical Inheritance (constructor syntax vs Object Only “Factory function based” syntax) vs Class Based Inheritance (class syntax)</p>

<ul>
  <li>https://davidwalsh.name/javascript-objects-deconstruction</li>
  <li>https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript</li>
  <li>https://zeekat.nl/articles/constructors-considered-mildly-confusing.html</li>
  <li>https://stackoverflow.com/questions/33692912/using-object-assign-and-object-create-for-inheritance</li>
  <li>https://stackoverflow.com/questions/4166616/understanding-the-difference-between-object-create-and-new-somefunction</li>
  <li>https://stackoverflow.com/questions/50050937/prototypal-inheritance-object-create-vs-object-assign</li>
  <li>https://medium.com/javascript-scene/3-different-kinds-of-prototypal-inheritance-es6-edition-32d777fa16c9</li>
  <li>https://medium.com/javascript-scene/common-misconceptions-about-inheritance-in-javascript-d5d9bab29b0a</li>
  <li>https://medium.com/javascript-scene/the-two-pillars-of-javascript-ee6f3281e7f3
https://medium.com/javascript-scene/javascript-factory-functions-vs-constructor-functions-vs-classes-2f22ceddf33e</li>
</ul>

<p>One major drawback to delegation is that it’s not very good for storing state. If you try to store state as objects or arrays, mutating any member of the object or array will mutate the member for every instance that shares the prototype. In order to preserve instance safety, you need to make a copy of the state for each object.</p>

<hr />

<p><strong>On ‘This’</strong></p>

<p>https://stackoverflow.com/questions/80084/in-javascript-why-is-the-this-operator-inconsistent/80478#80478</p>

<p><strong>On Continuation Passing Style </strong></p>

<p>https://www.quora.com/What-is-continuation-passing-style-in-functional-programming</p>

<p><strong>On Iterators</strong></p>

<p>https://codeburst.io/a-simple-guide-to-es6-iterators-in-javascript-with-examples-189d052c3d8e</p>

<hr />

<h1 id="async-programming">Async Programming</h1>

<p>async/await
Promise. Promise.reject Promise.resolve
Generator
Promise.coroutine
try catch throw
.catch.then
Promise.all</p>

<p>Promises and Generators:</p>

<p><a href="https://stackoverflow.com/questions/5080028/what-is-the-most-efficient-way-to-concatenate-n-arrays">Interview question</a></p>

<p>Interview question:
Implement a callback based asynchronous function. The callback handles error cases and correct response cases.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">sinon</span><span class="p">.</span><span class="nx">stub</span><span class="p">(</span><span class="nx">tax</span><span class="p">,</span> <span class="dl">'</span><span class="s1">calculate</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">subtotal</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">done</span><span class="p">({</span>
          <span class="na">amount</span><span class="p">:</span> <span class="mi">30</span>
        <span class="p">});</span>
      <span class="p">},</span> <span class="mi">0</span><span class="p">);</span>
 <span class="nx">afterEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">tax</span><span class="p">.</span><span class="nx">calculate</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>
  <span class="p">});</span>
</code></pre></div></div>

<hr />

<p>Generator function with yield keyword is just an iterator, which iterates over the parts of the program. It is used when you have a function which needs to suspend its execution, do some task, then resume execution.</p>

<p>Promise.coroutine(generator function): returns a function. This function, when called, returns a promise to execute the series of taks implicit in generator.  This promise is resolved when the done is set true within the generator.</p>

<p>async keyword returns a promise  = Promise.couroutine returns a promise. The ‘async’ annotation or Promise.coroutine is syntactic sugar for ‘returns a promise’.</p>

<p>await is nothing but sugar for promise.then syntax. Await doesn’t suspend execution. await or promise.then “unwraps” a promise and either result in the value the promise was resolved with or throws an error if the promise was rejected.</p>

<p>The difference beteen await and x.then() is that you can only use await inside an async function. Right now, top-level await isn’t yet supported, so you might have to make an async IIFE (Immediately Invoked Function Expression) to start an async context.</p>

<p>If a promise resolves normally, then await promise returns the result. But in the case of a rejection, it throws the error, just as if there were a throw statement at that line.</p>

<p>you should not put async callbacks inside of promises. Promisify everything that’s async and then you don’t have these restrictions. TLDR: A function is hard to use when it sometimes returns a promise and sometimes throws an exception. When writing an async function, prefer to signal failure by returning a rejected promise. As a good practice, an asynchronous action should always return a promise. That makes it possible to plan actions after it; even if we don’t plan to extend the chain now, we may need it later.</p>

<p>Promise.reject vs throw()
There is no advantage of using one vs the other, but, there is a specific case where throw won’t work. However, those cases can be fixed. Any time you are inside of a promise callback, you can use throw. However, if you’re in any other asynchronous callback, you must use reject. https://stackoverflow.com/questions/33445415/javascript-promises-reject-vs-throw</p>

<ul>
  <li>https://stackoverflow.com/questions/44149096/for-async-tests-and-hooks-ensure-done-is-called-if-returning-a-promise-en</li>
  <li>https://stackoverflow.com/questions/46515764/how-can-i-use-async-await-at-the-top-level</li>
  <li><a href="https://stackoverflow.com/questions/40745153/es8-immediately-invoked-async-function-expression">IIAFE</a></li>
  <li>(https://stackoverflow.com/questions/14220321/how-do-i-return-the-response-from-an-asynchronous-call)</li>
</ul>

<p>**Prefer promises to callbacks **</p>

<ul>
  <li>This makes the code more readable. Avoids the pyramid of doom.</li>
  <li>Promises allow us to do things in the natural order. First, we run the async function, and .then we write what to do with the result.</li>
  <li>We can call .then on a Promise as many times as we want Each time, we’re adding a new  a new subscribing function, to the “subscription list”. As opposed to the callback pattern, where there can be only one.</li>
</ul>

<p><a href="https://javascript.info/promise-basics">Reference</a></p>

<p><strong>Prefer using generators with async/await</strong> syntax to Promise.coroutine.</p>

<p><strong>Prefer factory functions</strong> to constructors/classes.</p>

<p><strong>passing dictionary object instead of parameters allows the function to destructure arguments irrespective of order</strong></p>

<p><strong>Use Object.spread, Object.assign, Object.keys</strong></p>

<p><strong>For loops go through prototype chain as well</strong>. might want to check <code class="language-plaintext highlighter-rouge">hasOwnProperty</code></p>

<p><strong>typeof (undefined) &amp;&amp; != null</strong></p>

<p><strong>if ()…can return false for 0 or false, not merely undefined or null</strong></p>

:ET