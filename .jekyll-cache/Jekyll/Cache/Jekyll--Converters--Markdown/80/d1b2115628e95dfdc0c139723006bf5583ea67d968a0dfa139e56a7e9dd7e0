I"—<p>A <strong>program</strong> (or a task or thread of execution) is very general thing - a set of ordered instructions for the CPU to carry out.</p>

<p>A <strong>process</strong> is an executing instance of a program. As an implementation detail, it is a (collection of) thread of execution and other context, such as <strong>address space</strong> and <strong>file descriptor table.</strong></p>

<p><strong>unix implementation details</strong></p>

<p>Unix supports the notion of a <strong>current working directory</strong> for each process, maintained as part of the process state. This allows users to refer to files by theirÂ relative pathnames, which are interpreted relative to the current directory. Unix guarantees that every process has a unique identifier called theÂ process ID. The process ID is always a non-negative integer. Similar to files, each process has one owner and group, and the owner and group permissions are used to determine which files and devices the process can open.Â Most processes also have a parent process that started them.Â </p>

<p><strong>File descriptors</strong> are normally small non-negative integers that the kernel uses to identify the files being accessed by a particular process.  Whenever it opens an existing file or creates a new file, the kernel returns a file descriptor that is used to read or write the file. (Sockets are based on a very similar mechanism i.e. socket descriptors).</p>

<p>A <strong>shell</strong> is a program (on Linux, written in C) that provides an interface to handle processes. An interactive shell, for example, sh, dash, bash, zsh and the likes, interpet (compile source code into OS-readable binary on the fly.)</p>

<p><a href="http://www.programmerinterview.com/data-structures/difference-between-stack-and-heap/">Stack and Heap</a></p>

<p><strong>Process Lifecycle</strong></p>

<p>A process may create another thread that shares its address space.</p>

:ET