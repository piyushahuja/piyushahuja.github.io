I"ä<hr />

<p>A <strong>program</strong> (or a task or thread of execution) is very general thing - a set of ordered instructions for the CPU to carry out.</p>

<p>A <strong>process</strong> is an executing instance of a program. As an implementation detail, it is a (collection of) thread of execution and other context, such as <strong>address space</strong> and <strong>file descriptor table.</strong></p>

<p><strong>unix implementation details</strong></p>

<p>Unix supports the notion of a <strong>current working directory</strong> for each process, maintained as part of the process state. This allows users to refer to files by theirÂ relative pathnames, which are interpreted relative to the current directory. Unix guarantees that every process has a unique identifier called theÂ <strong>process ID</strong>. The process ID is always a non-negative integer. Similar to files, each process has one <strong>owner</strong> and <strong>group</strong>, and the owner and group permissions are used to determine which files and devices the process can open.Â Most processes also have <strong>a parent process</strong> that started them.Â </p>

<p><strong>File descriptors</strong> are normally small non-negative integers that the kernel uses to identify the files being accessed by a particular process.  Whenever it opens an existing file or creates a new file, the kernel returns a file descriptor that is used to read or write the file. (Sockets are based on a very similar mechanism i.e. socket descriptors).</p>

<p>A <strong>shell</strong> is a program (on Linux, typically written in C) that provides an interface to handle processes. An interactive shell (<code class="language-plaintext highlighter-rouge">sh</code>, <code class="language-plaintext highlighter-rouge">dash</code>, <code class="language-plaintext highlighter-rouge">bash</code>, <code class="language-plaintext highlighter-rouge">zsh</code>) interpets (compile source code into OS-readable binary on the fly.)</p>

<hr />

<p><strong>Process Lifecycle</strong></p>

<p>A process may create another thread that shares its address space.</p>

<hr />

<p><a href="http://www.programmerinterview.com/data-structures/difference-between-stack-and-heap/">Stack and Heap</a></p>

<hr />

<p><strong>OS distributions</strong></p>

<p>An OS distribution has an OS kernel which interacts with utilities packaged with it. Compiling the software and making them work with one another is the job of the distribution.  Some Linux distributions are intended for desktop computers, some for servers without a graphical interface, and others for special uses, such as home theater PCs, supercomputers or embedded systems.</p>

<p>For example, the Linux kernel can be packaged with GNU shell utilities. The terminal and many of the commands we use on it are not part of the kernel, but of the Utilities.</p>

<p>Utilities might include:</p>

<ul>
  <li>desktop server</li>
  <li>desktop environment</li>
  <li>system services (Red Hat Linux has a built-in tool calledÂ LokkitÂ for configuring theÂ firewallÂ capabilities)</li>
  <li>graphical program ((e.f. Red Hat graphical installer calledÂ Anaconda)</li>
  <li>package managers (Red Hat was the first to use rpm)</li>
  <li>configuration utilities</li>
  <li>other software.</li>
</ul>
:ET